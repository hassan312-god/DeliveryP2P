#!/bin/bash

# Script de d√©ploiement pour corriger le routage API sur Render
# Auteur: LivraisonP2P Team
# Version: 1.0.0

set -e

echo "üöÄ D√©ploiement de la correction API sur Render..."

# Configuration
RENDER_SERVICE_NAME="deliveryp2p"
RENDER_API_URL="https://api.render.com/v1/services"

# V√©rification des variables d'environnement
if [ -z "$RENDER_API_KEY" ]; then
    echo "‚ùå Erreur: RENDER_API_KEY n'est pas d√©finie"
    echo "Veuillez d√©finir votre cl√© API Render:"
    echo "export RENDER_API_KEY=votre_cl√©_api"
    exit 1
fi

# R√©cup√©ration du service ID
echo "üìã R√©cup√©ration du service ID..."
SERVICE_ID=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
    "$RENDER_API_URL" | jq -r ".[] | select(.name == \"$RENDER_SERVICE_NAME\") | .id")

if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" = "null" ]; then
    echo "‚ùå Erreur: Service '$RENDER_SERVICE_NAME' non trouv√©"
    exit 1
fi

echo "‚úÖ Service ID trouv√©: $SERVICE_ID"

# D√©clenchement du red√©ploiement
echo "üîÑ D√©clenchement du red√©ploiement..."
DEPLOY_RESPONSE=$(curl -s -X POST \
    -H "Authorization: Bearer $RENDER_API_KEY" \
    -H "Content-Type: application/json" \
    "$RENDER_API_URL/$SERVICE_ID/deploys")

DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.id')

if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" = "null" ]; then
    echo "‚ùå Erreur: Impossible de d√©clencher le red√©ploiement"
    echo "R√©ponse: $DEPLOY_RESPONSE"
    exit 1
fi

echo "‚úÖ Red√©ploiement d√©clench√©: $DEPLOY_ID"

# Attente du d√©ploiement
echo "‚è≥ Attente du d√©ploiement..."
while true; do
    DEPLOY_STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
        "$RENDER_API_URL/$SERVICE_ID/deploys/$DEPLOY_ID" | jq -r '.status')
    
    echo "üìä Statut: $DEPLOY_STATUS"
    
    case $DEPLOY_STATUS in
        "live")
            echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
            break
            ;;
        "failed")
            echo "‚ùå D√©ploiement √©chou√©"
            exit 1
            ;;
        "canceled")
            echo "‚ùå D√©ploiement annul√©"
            exit 1
            ;;
        *)
            echo "‚è≥ D√©ploiement en cours..."
            sleep 10
            ;;
    esac
done

# Test de l'API apr√®s d√©ploiement
echo "üß™ Test de l'API apr√®s d√©ploiement..."

# Attendre que le service soit pr√™t
echo "‚è≥ Attente que le service soit pr√™t..."
sleep 30

# Test du health endpoint
echo "üì° Test du health endpoint..."
HEALTH_RESPONSE=$(curl -s "https://deliveryp2p-go4x.onrender.com/health")
if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
    echo "‚úÖ Health endpoint fonctionne"
else
    echo "‚ùå Health endpoint ne fonctionne pas"
    echo "R√©ponse: $HEALTH_RESPONSE"
fi

# Test du test-simple endpoint
echo "üì° Test du test-simple endpoint..."
TEST_RESPONSE=$(curl -s "https://deliveryp2p-go4x.onrender.com/test-simple")
if echo "$TEST_RESPONSE" | grep -q "API is working correctly"; then
    echo "‚úÖ Test-simple endpoint fonctionne"
else
    echo "‚ùå Test-simple endpoint ne fonctionne pas"
    echo "R√©ponse: $TEST_RESPONSE"
fi

# Test d'un endpoint d'authentification
echo "üì° Test d'un endpoint d'authentification..."
AUTH_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d '{"test":"data"}' \
    "https://deliveryp2p-go4x.onrender.com/auth/register")
if echo "$AUTH_RESPONSE" | grep -q "success\|error"; then
    echo "‚úÖ Endpoint d'authentification fonctionne (r√©ponse API)"
else
    echo "‚ùå Endpoint d'authentification ne fonctionne pas (r√©ponse HTML)"
    echo "R√©ponse: ${AUTH_RESPONSE:0:200}..."
fi

echo "üéâ D√©ploiement termin√©!"
echo "üåê URL de l'application: https://deliveryp2p-go4x.onrender.com"
echo "üîó URL de l'API: https://deliveryp2p-go4x.onrender.com/health" 